@page "/products"
@attribute [Authorize(Policy = "AdminOnly")]

@inject NavigationManager NavigationManager
@inject UseCases.IViewProductsUseCase ViewProductsUseCase
@inject UseCases.IGetCategoryByldUseCase GetCategoryByIdUseCase
@inject UseCases.IDeleteProductUseCase DeleteProductUseCase

<h3>Products</h3>
<table class="table">
    <thead>
        <tr>
            <th>Product Category</th>
            <th>Product Name</th>
            <th>Price</th>
            <th>Quantity</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in products)
        {
            <tr>
                <td>@GetCategoryByIdUseCase.Execute(product.CategoryId.Value)?.Name</td>
                <td>@product.Name</td>
                <td>@(Math.Round(product.Price.Value, 2))</td>
                <td>@product.Quantity</td>
                <td>
                    <button type="button" @onclick="@(() => EditProduct(product))" class="btn btn-link">Edit</button>
                    <button type="button" @onclick="@(() => DeleteProduct(product.ProductId))" class="btn btn-link">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>


<button type="button" @onclick="OnClickAddProduct" class="btn btn-primary">Add Product</button>



@code {

    private IEnumerable<Product> products;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadProducts();

    }

    private void LoadProducts()
    {
        products = ViewProductsUseCase.Execute().ToList();
    }

    private void OnClickAddProduct()
    {
        NavigationManager.NavigateTo("/addproduct");
    }

    private void EditProduct(Product product)
    {
        NavigationManager.NavigateTo($"/editproduct/{product.ProductId}");
    }

    private void DeleteProduct(int productId)
    {
        DeleteProductUseCase.Delete(productId);
        LoadProducts();
    }


}

