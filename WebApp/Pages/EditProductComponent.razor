@page "/editproduct/{productId}"

@inject NavigationManager NavigationManager
@inject UseCases.IAddProductUseCase AddProductUseCase
@inject UseCases.UseCaseInferfaces.IGetProductByIdUseCase GetProductByIdUseCase
@inject UseCases.IEditProductUseCase EditProductUseCase


<h3>Edit Product</h3>

@if (product != null)
{
    <EditForm Model="product" OnValidSubmit="OnValidSumit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="product.Name" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="product.Price" @bind-Value:format="F2" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" @onclick="OnCancel">Cancel</button>
    </EditForm>
}

@code {
            [Parameter]
            public string ProductId { get; set; }

    private Product product;

        protected override void OnInitialized()
        {
            base.OnInitialized();
        }

        protected override void OnParametersSet()
        {
            base.OnParametersSet();

            if (int.TryParse(this.ProductId, out int iProductId))
            {
                this.product = GetProductByIdUseCase.Execute(iProductId);
            }
        }

        private void OnValidSumit()
        {
            EditProductUseCase.Execute(this.product);
            NavigationManager.NavigateTo("/products");
        }

        private void OnCancel()
        {
            NavigationManager.NavigateTo("/products");
        }

    }

